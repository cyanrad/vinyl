// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const getAllTrackItems = `-- name: GetAllTrackItems :many
SELECT  t.id                         AS track_id,
        t.title,
        al.id                        AS album_id,
        al.name                      AS album_name,
        GROUP_CONCAT(ar.id, ', ')    AS artist_ids,
        GROUP_CONCAT(ar.name, ', ')  AS artist_names
  FROM  tracks AS t
  JOIN  tracks_artists AS tar         ON t.id = tar.track_id
  JOIN  artists AS ar                 ON tar.artist_id = ar.id
  LEFT  JOIN tracks_albums AS tal     ON t.id = tal.track_id
  LEFT  JOIN albums AS al             ON tal.album_id = al.id
 GROUP  BY 1,2,3,4
 ORDER  BY t.created_at
`

type GetAllTrackItemsRow struct {
	TrackID     int64          `json:"track_id"`
	Title       string         `json:"title"`
	AlbumID     sql.NullInt64  `json:"album_id"`
	AlbumName   sql.NullString `json:"album_name"`
	ArtistIds   string         `json:"artist_ids"`
	ArtistNames string         `json:"artist_names"`
}

func (q *Queries) GetAllTrackItems(ctx context.Context) ([]GetAllTrackItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTrackItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTrackItemsRow
	for rows.Next() {
		var i GetAllTrackItemsRow
		if err := rows.Scan(
			&i.TrackID,
			&i.Title,
			&i.AlbumID,
			&i.AlbumName,
			&i.ArtistIds,
			&i.ArtistNames,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
