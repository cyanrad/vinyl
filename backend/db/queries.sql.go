// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
)

const getAllTrackItems = `-- name: GetAllTrackItems :many
SELECT  t.id                         AS track_id,
        t.title,
        al.id                        AS album_id,
        al.name                      AS album_name,
        GROUP_CONCAT(ar.id, ',')     AS artist_ids,
        GROUP_CONCAT(ar.name, ',')   AS artist_names
  FROM  tracks AS t
  JOIN  tracks_artists AS tar         ON t.id = tar.track_id
  JOIN  artists AS ar                 ON tar.artist_id = ar.id
  LEFT  JOIN tracks_albums AS tal     ON t.id = tal.track_id
  LEFT  JOIN albums AS al             ON tal.album_id = al.id
 GROUP  BY 1,2,3,4
 ORDER  BY t.created_at
`

type GetAllTrackItemsRow struct {
	TrackID     int64   `json:"track_id"`
	Title       string  `json:"title"`
	AlbumID     *int64  `json:"album_id"`
	AlbumName   *string `json:"album_name"`
	ArtistIds   string  `json:"artist_ids"`
	ArtistNames string  `json:"artist_names"`
}

func (q *Queries) GetAllTrackItems(ctx context.Context) ([]GetAllTrackItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTrackItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTrackItemsRow
	for rows.Next() {
		var i GetAllTrackItemsRow
		if err := rows.Scan(
			&i.TrackID,
			&i.Title,
			&i.AlbumID,
			&i.AlbumName,
			&i.ArtistIds,
			&i.ArtistNames,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTracks = `-- name: GetAllTracks :many
SELECT  id, title, description, tags, created_at
  FROM  tracks AS t
 ORDER  BY t.created_at
`

func (q *Queries) GetAllTracks(ctx context.Context) ([]Track, error) {
	rows, err := q.db.QueryContext(ctx, getAllTracks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Track
	for rows.Next() {
		var i Track
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Tags,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArtistByName = `-- name: GetArtistByName :one
SELECT  a.id
  FROM  artists AS a
 WHERE  a.name = ?
`

func (q *Queries) GetArtistByName(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getArtistByName, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getOneTrackItems = `-- name: GetOneTrackItems :one
SELECT  t.id                         AS track_id,
        t.title,
        al.id                        AS album_id,
        al.name                      AS album_name,
        GROUP_CONCAT(ar.id, ',')     AS artist_ids,
        GROUP_CONCAT(ar.name, ',')   AS artist_names
  FROM  tracks AS t
  JOIN  tracks_artists AS tar         ON t.id = tar.track_id
  JOIN  artists AS ar                 ON tar.artist_id = ar.id
  LEFT  JOIN tracks_albums AS tal     ON t.id = tal.track_id
  LEFT  JOIN albums AS al             ON tal.album_id = al.id
 WHERE  t.id = ?
 GROUP  BY 1,2,3,4
`

type GetOneTrackItemsRow struct {
	TrackID     int64   `json:"track_id"`
	Title       string  `json:"title"`
	AlbumID     *int64  `json:"album_id"`
	AlbumName   *string `json:"album_name"`
	ArtistIds   string  `json:"artist_ids"`
	ArtistNames string  `json:"artist_names"`
}

func (q *Queries) GetOneTrackItems(ctx context.Context, id int64) (GetOneTrackItemsRow, error) {
	row := q.db.QueryRowContext(ctx, getOneTrackItems, id)
	var i GetOneTrackItemsRow
	err := row.Scan(
		&i.TrackID,
		&i.Title,
		&i.AlbumID,
		&i.AlbumName,
		&i.ArtistIds,
		&i.ArtistNames,
	)
	return i, err
}
