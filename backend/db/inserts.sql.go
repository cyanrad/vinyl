// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: inserts.sql

package db

import (
	"context"
)

const createAlbum = `-- name: CreateAlbum :one
INSERT INTO albums (name, full_name, description) VALUES (?, ?, ?) RETURNING id, name, full_name, description, created_at
`

type CreateAlbumParams struct {
	Name        string  `json:"name"`
	FullName    string  `json:"fullName"`
	Description *string `json:"description"`
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (Album, error) {
	row := q.db.QueryRowContext(ctx, createAlbum, arg.Name, arg.FullName, arg.Description)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FullName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const createArtist = `-- name: CreateArtist :exec
INSERT INTO artists (name, description, links) VALUES (?, ?, ?)
`

type CreateArtistParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	Links       string  `json:"links"`
}

func (q *Queries) CreateArtist(ctx context.Context, arg CreateArtistParams) error {
	_, err := q.db.ExecContext(ctx, createArtist, arg.Name, arg.Description, arg.Links)
	return err
}

const createArtistAlbum = `-- name: CreateArtistAlbum :exec
INSERT INTO artists_albums (artist_id, album_id, rank) VALUES (?, ?, ?)
`

type CreateArtistAlbumParams struct {
	ArtistID int64 `json:"artistId"`
	AlbumID  int64 `json:"albumId"`
	Rank     int64 `json:"rank"`
}

func (q *Queries) CreateArtistAlbum(ctx context.Context, arg CreateArtistAlbumParams) error {
	_, err := q.db.ExecContext(ctx, createArtistAlbum, arg.ArtistID, arg.AlbumID, arg.Rank)
	return err
}

const createPlaylist = `-- name: CreatePlaylist :exec
INSERT INTO playlists (name, description) VALUES (?, ?)
`

type CreatePlaylistParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) error {
	_, err := q.db.ExecContext(ctx, createPlaylist, arg.Name, arg.Description)
	return err
}

const createTrack = `-- name: CreateTrack :one
INSERT INTO tracks (title, full_title, description, tags) VALUES (?, ?, ?, ?) RETURNING id, title, full_title, description, tags, created_at
`

type CreateTrackParams struct {
	Title       string  `json:"title"`
	FullTitle   string  `json:"fullTitle"`
	Description *string `json:"description"`
	Tags        *string `json:"tags"`
}

func (q *Queries) CreateTrack(ctx context.Context, arg CreateTrackParams) (Track, error) {
	row := q.db.QueryRowContext(ctx, createTrack,
		arg.Title,
		arg.FullTitle,
		arg.Description,
		arg.Tags,
	)
	var i Track
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.FullTitle,
		&i.Description,
		&i.Tags,
		&i.CreatedAt,
	)
	return i, err
}

const createTrackAlbum = `-- name: CreateTrackAlbum :exec
INSERT INTO tracks_albums (track_id, album_id, rank) VALUES (?, ?, ?)
`

type CreateTrackAlbumParams struct {
	TrackID int64 `json:"trackId"`
	AlbumID int64 `json:"albumId"`
	Rank    int64 `json:"rank"`
}

func (q *Queries) CreateTrackAlbum(ctx context.Context, arg CreateTrackAlbumParams) error {
	_, err := q.db.ExecContext(ctx, createTrackAlbum, arg.TrackID, arg.AlbumID, arg.Rank)
	return err
}

const createTrackArtist = `-- name: CreateTrackArtist :exec
INSERT INTO tracks_artists (track_id, artist_id, rank) VALUES (?, ?, ?)
`

type CreateTrackArtistParams struct {
	TrackID  int64 `json:"trackId"`
	ArtistID int64 `json:"artistId"`
	Rank     int64 `json:"rank"`
}

func (q *Queries) CreateTrackArtist(ctx context.Context, arg CreateTrackArtistParams) error {
	_, err := q.db.ExecContext(ctx, createTrackArtist, arg.TrackID, arg.ArtistID, arg.Rank)
	return err
}

const createTrackPlaylist = `-- name: CreateTrackPlaylist :exec
INSERT INTO tracks_playlists (track_id, playlist_id, rank) VALUES (?, ?, ?)
`

type CreateTrackPlaylistParams struct {
	TrackID    int64 `json:"trackId"`
	PlaylistID int64 `json:"playlistId"`
	Rank       int64 `json:"rank"`
}

func (q *Queries) CreateTrackPlaylist(ctx context.Context, arg CreateTrackPlaylistParams) error {
	_, err := q.db.ExecContext(ctx, createTrackPlaylist, arg.TrackID, arg.PlaylistID, arg.Rank)
	return err
}
